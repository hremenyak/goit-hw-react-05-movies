{"version":3,"file":"static/js/387.cf071b3d.chunk.js","mappings":"mRAEaA,EAAOC,EAAAA,GAAAA,GAAH,2HAQJC,EAAUD,EAAAA,GAAAA,IAAH,+D,SCqCpB,EA1CgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBF,GAAa,GADG,mBAGKG,EAAAA,EAAAA,IAAWN,GAHhB,OAGRO,EAHQ,OAIdR,EAAWQ,GAJG,gDAMdC,QAAQC,IAAR,KAAe,4BAND,yBAQdN,GAAa,GARC,4EAAH,qDAWfE,GACD,GAAE,CAACL,KAGF,2BACGE,GACC,yCAEA,SAACN,EAAD,UACGE,EAAQY,OAAS,GAChBZ,EAAQa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,UAACpB,EAAD,YACE,wBACE,oCAAYmB,QAEd,6BAAKC,EAAL,SAJSF,EADD,OAUhBd,EAAQY,SAAU,qEAGzB,C,mMC3CDK,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAGCC,EAAiB,mCAAG,sGACRF,EAAAA,GAAAA,IAAA,oCAAuCC,IAD/B,uBACvBT,EADuB,EACvBA,KADuB,kBAExBA,EAAKW,SAFmB,2CAAH,qDAOjBC,EAAY,mCAAG,WAAMnB,GAAN,uFACRe,EAAAA,GAAAA,IAAA,iBACDf,EADC,oBACkBgB,IACjCI,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAM,uCACjB,IALuB,cACpBC,EADoB,yBAMnBA,EAAIhB,MANe,2CAAH,sDAWZiB,EAAU,mCAAG,WAAMxB,GAAN,yFACDe,EAAAA,GAAAA,IAAA,iBACXf,EADW,4BACgBgB,EADhB,oBADC,uBAChBT,EADgB,EAChBA,KADgB,kBAKjBA,EAAKkB,MALY,2CAAH,sDAUVnB,EAAU,mCAAG,WAAMN,GAAN,yFACDe,EAAAA,GAAAA,IAAA,iBAAoBf,EAApB,4BAA+CgB,IAD9C,uBAChBT,EADgB,EAChBA,KADgB,kBAEjBA,EAAKW,SAFY,2CAAH,sDAOVQ,EAAe,mCAAG,WAAMC,GAAN,yFACNZ,EAAAA,GAAAA,IAAA,gCACIC,EADJ,kBACiBW,EADjB,+CADM,uBACrBpB,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  text-align: justify;\n  list-style: none;\n  :not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  margin-top: 10px;\n  padding: 10px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'services/api';\nimport { Item, Wrapper } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getReviews(movieId);\n        setReviews(data);\n      } catch (e) {\n        console.log(e, 'There has been a mistake');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <Wrapper>\n          {reviews.length > 0 &&\n            reviews.map(({ id, author, content }) => (\n              <Item key={id}>\n                <p>\n                  <b>Author: {author}</b>\n                </p>\n                <p>\"{content}\"</p>\n              </Item>\n            ))}\n        </Wrapper>\n      )}\n      {!reviews.length && <p>There are no reviews for this film yet.</p>}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'fb0f8889c4de169f6f8eba7a95a6c733';\n\n//trending movies request\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?api_key=${KEY}`);\n  return data.results;\n};\n\n// movie details request\n\nexport const getMovieById = async movieId => {\n  const res = await axios\n    .get(`/movie/${movieId}?api_key=${KEY}`)\n    .catch(error => {\n      throw new Error('Oops... seems like an error occured.');\n    });\n  return res.data;\n};\n\n//cast info request\n\nexport const getCredits = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n\n  return data.cast;\n};\n\n//reviews request\n\nexport const getReviews = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}`);\n  return data.results;\n};\n\n// search movies request\n\nexport const getMoviesByName = async query => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return data;\n};\n"],"names":["Item","styled","Wrapper","useState","reviews","setReviews","movieId","useParams","isLoading","setIsLoading","useEffect","fetchData","getReviews","data","console","log","length","map","id","author","content","axios","KEY","getTrendingMovies","results","getMovieById","catch","error","Error","res","getCredits","cast","getMoviesByName","query"],"sourceRoot":""}