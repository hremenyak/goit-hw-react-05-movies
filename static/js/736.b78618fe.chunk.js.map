{"version":3,"file":"static/js/736.b78618fe.chunk.js","mappings":"+RAEaA,EAAWC,EAAAA,GAAAA,GAAH,2GAORC,EAAUD,EAAAA,GAAAA,QAAH,6CAIPE,EAAOF,EAAAA,GAAAA,GAAH,2F,SC2DjB,EAhEa,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,MAAjC,eAAOG,EAAP,KAAaC,EAAb,KAgBA,IAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBJ,GAAa,GADG,mBAGKK,EAAAA,EAAAA,IAAWT,GAHhB,OAGRK,EAHQ,OAIdC,EAAQD,GAJM,gDAMdK,QAAQC,IAAR,MANc,yBAQdP,GAAa,GARC,4EAAH,qDAWfI,GACD,GAAE,CAACR,IACCK,EAIL,OACE,UAACP,EAAD,WACGK,GACC,yCAEA,SAACJ,EAAD,UACGM,EAAKO,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC7BC,EAAWH,EAhCZ,kCAiCUA,EACXI,EACJ,OACE,UAACtB,EAAD,YACE,gBAAKuB,IAAKF,EAAUG,IAAKL,EAAMM,MAAO,IAAKC,OAAQ,OACnD,4BACE,wBACE,0BAAOP,MAERC,GACC,0BACE,uCACA,gCAAQA,SAGV,0BACE,uCACA,+CAdOH,EAoBlB,OAGHR,EAAKkB,SACL,+FAIP,C,mMCpEDC,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAGCC,EAAiB,mCAAG,sGACRF,EAAAA,GAAAA,IAAA,oCAAuCC,IAD/B,uBACvBE,EADuB,EACvBA,KADuB,kBAExBA,EAAKC,SAFmB,2CAAH,qDAOjBC,EAAY,mCAAG,WAAM7B,GAAN,uFACRwB,EAAAA,GAAAA,IAAA,iBACDxB,EADC,oBACkByB,IACjCK,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAM,uCACjB,IALuB,cACpBC,EADoB,yBAMnBA,EAAIN,MANe,2CAAH,sDAWZlB,EAAU,mCAAG,WAAMT,GAAN,yFACDwB,EAAAA,GAAAA,IAAA,iBACXxB,EADW,4BACgByB,EADhB,oBADC,uBAChBE,EADgB,EAChBA,KADgB,kBAKjBA,EAAKtB,MALY,2CAAH,sDAUV6B,EAAU,mCAAG,WAAMlC,GAAN,yFACDwB,EAAAA,GAAAA,IAAA,iBAAoBxB,EAApB,4BAA+CyB,IAD9C,uBAChBE,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,sDAOVO,EAAe,mCAAG,WAAMC,GAAN,yFACNZ,EAAAA,GAAAA,IAAA,gCACIC,EADJ,kBACiBW,EADjB,+CADM,uBACrBT,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  justify-content: start;\n`;\n\nexport const Section = styled.section`\n  padding: 15px 10;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 15px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCredits } from 'services/api';\nimport blankImage from '../../images/blank_profile.png';\nimport { ListItem, Section, List } from './Cast.styled';\n\nconst IMAGEURL = 'https://image.tmdb.org/t/p/w500';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const cast = await getCredits(movieId);\n        setCast(cast);\n      } catch (e) {\n        console.log(e);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <Section>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <List>\n          {cast.map(({ id, profile_path, name, character }) => {\n            const imageSRC = profile_path\n              ? IMAGEURL + profile_path\n              : blankImage;\n            return (\n              <ListItem key={id}>\n                <img src={imageSRC} alt={name} width={200} height={300} />\n                <div>\n                  <p>\n                    <span>{name}</span>\n                  </p>\n                  {character ? (\n                    <p>\n                      <b>Character:</b>\n                      <span> {character}</span>\n                    </p>\n                  ) : (\n                    <p>\n                      <b>Character:</b>\n                      <span> Unknown</span>\n                    </p>\n                  )}\n                </div>\n              </ListItem>\n            );\n          })}\n        </List>\n      )}\n      {!cast.length && (\n        <p>There is no information about the cast of this film yet. Sorry...</p>\n      )}\n    </Section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'fb0f8889c4de169f6f8eba7a95a6c733';\n\n//trending movies request\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?api_key=${KEY}`);\n  return data.results;\n};\n\n// movie details request\n\nexport const getMovieById = async movieId => {\n  const res = await axios\n    .get(`/movie/${movieId}?api_key=${KEY}`)\n    .catch(error => {\n      throw new Error('Oops... seems like an error occured.');\n    });\n  return res.data;\n};\n\n//cast info request\n\nexport const getCredits = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n\n  return data.cast;\n};\n\n//reviews request\n\nexport const getReviews = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}`);\n  return data.results;\n};\n\n// search movies request\n\nexport const getMoviesByName = async query => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return data;\n};\n"],"names":["ListItem","styled","Section","List","movieId","useParams","useState","isLoading","setIsLoading","cast","setCast","useEffect","fetchData","getCredits","console","log","map","id","profile_path","name","character","imageSRC","blankImage","src","alt","width","height","length","axios","KEY","getTrendingMovies","data","results","getMovieById","catch","error","Error","res","getReviews","getMoviesByName","query"],"sourceRoot":""}